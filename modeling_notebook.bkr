{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "Python3",
            "plugin": "Python3",
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "markdownlvj1ZR",
            "type": "markdown",
            "body": [
                "Notes:",
                "grid search imputation strategy (mean,median,most_frequent)  ",
                "test anamoly detection vs supervised learning algo    ",
                "test max of all part type features or min of all common features in part type  "
            ],
            "evaluatorReader": false
        },
        {
            "id": "code3JiVTj",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "import os",
                    "os.chdir(\"C:/Users/macle/Desktop/kaggle/bosch-production-line-performance\")",
                    "",
                    "import warnings",
                    "warnings.filterwarnings('ignore')",
                    "",
                    "import json",
                    "import pandas as pd",
                    "import random",
                    "import numpy as np",
                    "",
                    "import matplotlib.pyplot as plt",
                    "import matplotlib as mpl",
                    "%matplotlib inline",
                    "",
                    "from sklearn import feature_extraction",
                    "from sklearn.metrics.pairwise import cosine_similarity",
                    "from sklearn.cluster import KMeans",
                    "from sklearn.cluster import AgglomerativeClustering",
                    "from sklearn.manifold import MDS",
                    "from sklearn.neighbors import DistanceMetric",
                    "from sklearn.neighbors import NearestNeighbors",
                    "from sklearn.ensemble import RandomForestRegressor",
                    "from sklearn.pipeline import Pipeline",
                    "from sklearn.preprocessing import Imputer",
                    "from sklearn.cross_validation import cross_val_score",
                    "",
                    "import itertools",
                    "import csv"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Python3",
                "shellId": "8E05222B8C3D4A4A8B083176D3990994",
                "elapsedTime": 5264
            },
            "evaluatorReader": true,
            "lineCount": 29
        },
        {
            "id": "codegZb5MN",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "import os",
                    "os.chdir(\"C:/Users/macle/Desktop/kaggle/bosch-production-line-performance\")",
                    "",
                    "#import model",
                    "import importlib",
                    "importlib.reload(model)",
                    "from model import *",
                    "",
                    "test_model = model.load_model('models/2000_subset_3_type_model.pkl')"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Python3",
                "shellId": "3319AE5A9E8040BB998A93304B1349CA",
                "elapsedTime": 861
            },
            "evaluatorReader": true,
            "lineCount": 9
        },
        {
            "id": "codery5hTb",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "x = test_model.get_top_n_features(300)",
                    "with open('feature_list.json', 'w') as outfile:",
                    "    json.dump(x['all_top_features'],outfile)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Python3",
                "shellId": "3319AE5A9E8040BB998A93304B1349CA",
                "elapsedTime": 227,
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "235\n305\n283\n305\n271\n305\n3\n305\n264\n305\n280\n305\n279\n305\n243\n305\n179\n305\n229\n305\n238\n305\n185\n305\n231\n305\n583\n305\n257\n305\n251\n305\n584\n305\n42\n305\n234\n305\n224\n305\n230\n305\n247\n305\n228\n305\n79\n305\n255\n305\n178\n305\n254\n305\n227\n305\n232\n305\n293\n305\n260\n305\n252\n305\n278\n305\n249\n305\n263\n305\n100\n305\n270\n305\n261\n305\n6\n305\n5\n305\n587\n305\n262\n305\n80\n305\n98\n305\n106\n305\n246\n305\n240\n305\n585\n305\n245\n305\n282\n305\n236\n305\n183\n305\n103\n305\n0\n305\n258\n305\n297\n305\n574\n305\n292\n305\n256\n305\n233\n305\n241\n305\n242\n305\n4\n305\n75\n305\n267\n305\n528\n305\n84\n305\n281\n305\n597\n305\n7\n305\n588\n305\n244\n305\n600\n305\n599\n305\n82\n305\n589\n305\n248\n305\n237\n305\n474\n500\n378\n500\n364\n500\n475\n500\n462\n500\n394\n500\n362\n500\n400\n500\n370\n500\n366\n500\n317\n500\n6\n500\n478\n500\n376\n500\n989\n500\n398\n500\n368\n500\n957\n500\n430\n500\n316\n500\n392\n500\n372\n500\n408\n500\n490\n500\n358\n500\n380\n500\n396\n500\n987\n500\n382\n500\n111\n500\n3\n500\n4\n500\n318\n500\n360\n500\n404\n500\n446\n500\n356\n500\n990\n500\n374\n500\n458\n500\n8\n500\n500\n500\n0\n500\n448\n500\n436\n500\n426\n500\n424\n500\n428\n500\n540\n500\n444\n500\n322\n500\n492\n500\n442\n500\n471\n500\n311\n500\n326\n500\n1\n500\n7\n500\n856\n500\n9\n500\n77\n500\n132\n500\n580\n500\n313\n500\n974\n500\n10\n500\n5\n500\n314\n500\n488\n500\n438\n500\n579\n500\n386\n500\n40\n500\n136\n500\n857\n500\n14\n500\n324\n500\n432\n500\n114\n500\n988\n500\n992\n500\n460\n500\n402\n500\n476\n500\n958\n500\n384\n500\n991\n500\n574\n500\n811\n500\n473\n500\n487\n500\n983\n500\n390\n500\n135\n500\n78\n500\n575\n500\n464\n500\n414\n500\n434\n500\n412\n500\n"
                        }
                    ],
                    "payload": "<div class=\"output_subarea output_text\"><pre>{'0': ['L3_S33_F3857',\n  'L3_S29_F3348',\n  'L3_S29_F3327',\n  'L3_S33_F3859',\n  'L3_S29_F3479',\n  'L3_S29_F3373',\n  'L3_S29_F3324',\n  'L3_S29_F3382',\n  'L3_S29_F3336',\n  'L3_S29_F3330',\n  'L2_S26_F3069',\n  'L0_S0_F20',\n  'L3_S33_F3865',\n  'L3_S29_F3345',\n  'L3_S29_F3379',\n  'L3_S29_F3333',\n  'L3_S29_F3430',\n  'L2_S26_F3062',\n  'L3_S29_F3370',\n  'L3_S29_F3339',\n  'L3_S29_F3395',\n  'L3_S36_F3920',\n  'L3_S29_F3318',\n  'L3_S29_F3351',\n  'L3_S29_F3376',\n  'L3_S29_F3354',\n  'L1_S24_F1565',\n  'L0_S0_F16',\n  'L0_S0_F18',\n  'L2_S26_F3073',\n  'L3_S29_F3321',\n  'L3_S29_F3388',\n  'L3_S29_F3455',\n  'L3_S29_F3315',\n  'L3_S29_F3342',\n  'L3_S29_F3473',\n  'L0_S0_F4',\n  'L0_S0_F10',\n  'L3_S29_F3458',\n  'L3_S29_F3439',\n  'L3_S29_F3424',\n  'L3_S29_F3421',\n  'L3_S29_F3427',\n  'L3_S29_F3452',\n  'L2_S26_F3113',\n  'L3_S36_F3924',\n  'L3_S29_F3449',\n  'L3_S32_F3850',\n  'L2_S26_F3036',\n  'L2_S27_F3129',\n  'L0_S0_F12',\n  'L0_S0_F22',\n  'L0_S0_F6',\n  'L0_S7_F138',\n  'L1_S24_F1838',\n  'L2_S26_F3047',\n  'L0_S0_F8',\n  'L0_S0_F2',\n  'L2_S26_F3051',\n  'L3_S35_F3896',\n  'L3_S29_F3442',\n  'L3_S29_F3360',\n  'L0_S17_F431',\n  'L1_S24_F1846',\n  'L0_S12_F336',\n  'L2_S26_F3121',\n  'L3_S29_F3433',\n  'L1_S24_F1571',\n  'L3_S29_F3476',\n  'L3_S29_F3385',\n  'L3_S33_F3861',\n  'L3_S29_F3357',\n  'L3_S33_F3855',\n  'L3_S35_F3894',\n  'L3_S29_F3367',\n  'L1_S24_F1844',\n  'L0_S7_F142',\n  'L3_S29_F3482',\n  'L3_S29_F3404',\n  'L3_S29_F3436',\n  'L3_S29_F3401'],\n '1': [],\n '2': ['L3_S29_F3351',\n  'L3_S33_F3865',\n  'L3_S29_F3479',\n  'L0_S0_F16',\n  'L3_S29_F3458',\n  'L3_S33_F3859',\n  'L3_S33_F3857',\n  'L3_S29_F3379',\n  'L2_S26_F3040',\n  'L3_S29_F3333',\n  'L3_S29_F3360',\n  'L2_S26_F3073',\n  'L3_S29_F3339',\n  'L3_S29_F3433',\n  'L3_S29_F3407',\n  'L0_S5_F114',\n  'L3_S29_F3348',\n  'L3_S29_F3318',\n  'L3_S29_F3336',\n  'L3_S29_F3395',\n  'L3_S29_F3330',\n  'L1_S24_F1565',\n  'L3_S29_F3427',\n  'L2_S26_F3036',\n  'L3_S29_F3424',\n  'L3_S29_F3327',\n  'L3_S29_F3342',\n  'L3_S35_F3896',\n  'L3_S29_F3442',\n  'L3_S29_F3412',\n  'L3_S33_F3855',\n  'L3_S29_F3401',\n  'L3_S29_F3455',\n  'L1_S24_F1838',\n  'L3_S29_F3476',\n  'L3_S29_F3449',\n  'L0_S0_F20',\n  'L0_S0_F2',\n  'L3_S29_F3452',\n  'L1_S24_F1567',\n  'L1_S24_F1834',\n  'L1_S24_F1850',\n  'L3_S29_F3388',\n  'L3_S29_F3370',\n  'L3_S29_F3385',\n  'L3_S33_F3863',\n  'L3_S29_F3354',\n  'L2_S26_F3062',\n  'L1_S24_F1844',\n  'L0_S0_F10',\n  'L3_S29_F3436',\n  'L3_S36_F3924',\n  'L3_S35_F3894',\n  'L3_S29_F3430',\n  'L3_S29_F3345',\n  'L3_S29_F3373',\n  'L3_S29_F3376',\n  'L0_S0_F18',\n  'L1_S24_F1512',\n  'L3_S29_F3467',\n  'L1_S24_F1575',\n  'L3_S33_F3861',\n  'L0_S0_F22',\n  'L3_S29_F3382',\n  'L1_S24_F1571',\n  'L3_S29_F3398',\n  'L3_S29_F3357'],\n 'all_top_features': ['L0_S0_F20',\n  'L0_S12_F336',\n  'L2_S26_F3069',\n  'L3_S29_F3324',\n  'L3_S29_F3467',\n  'L3_S33_F3857',\n  'L3_S29_F3479',\n  'L3_S33_F3861',\n  'L3_S29_F3473',\n  'L3_S29_F3321',\n  'L3_S32_F3850',\n  'L2_S26_F3073',\n  'L3_S29_F3351',\n  'L1_S24_F1565',\n  'L3_S29_F3388',\n  'L3_S29_F3357',\n  'L0_S0_F2',\n  'L0_S0_F10',\n  'L3_S29_F3345',\n  'L3_S29_F3330',\n  'L3_S29_F3376',\n  'L2_S26_F3062',\n  'L3_S29_F3442',\n  'L3_S29_F3449',\n  'L1_S24_F1567',\n  'L3_S29_F3373',\n  'L0_S7_F138',\n  'L3_S29_F3430',\n  'L1_S24_F1834',\n  'L0_S0_F22',\n  'L2_S26_F3040',\n  'L3_S33_F3863',\n  'L2_S26_F3036',\n  'L3_S29_F3412',\n  'L0_S17_F431',\n  'L1_S24_F1838',\n  'L3_S29_F3360',\n  'L0_S0_F6',\n  'L3_S29_F3455',\n  'L3_S35_F3894',\n  'L3_S29_F3433',\n  'L3_S33_F3859',\n  'L3_S29_F3482',\n  'L3_S29_F3354',\n  'L3_S29_F3436',\n  'L2_S26_F3051',\n  'L3_S33_F3855',\n  'L1_S24_F1571',\n  'L0_S0_F4',\n  'L1_S24_F1846',\n  'L3_S29_F3404',\n  'L3_S29_F3342',\n  'L3_S29_F3367',\n  'L3_S29_F3439',\n  'L3_S29_F3476',\n  'L3_S29_F3401',\n  'L0_S0_F16',\n  'L3_S29_F3333',\n  'L0_S0_F12',\n  'L3_S29_F3385',\n  'L3_S29_F3318',\n  'L3_S29_F3395',\n  'L3_S29_F3424',\n  'L0_S0_F18',\n  'L3_S29_F3379',\n  'L2_S26_F3113',\n  'L0_S0_F8',\n  'L0_S7_F142',\n  'L1_S24_F1850',\n  'L3_S29_F3407',\n  'L3_S35_F3896',\n  'L3_S29_F3348',\n  'L3_S29_F3370',\n  'L3_S36_F3920',\n  'L1_S24_F1512',\n  'L1_S24_F1844',\n  'L1_S24_F1575',\n  'L3_S29_F3421',\n  'L0_S5_F114',\n  'L2_S26_F3047',\n  'L3_S29_F3339',\n  'L3_S29_F3427',\n  'L2_S26_F3121',\n  'L3_S29_F3315',\n  'L2_S27_F3129',\n  'L3_S29_F3458',\n  'L3_S33_F3865',\n  'L3_S29_F3336',\n  'L3_S29_F3452',\n  'L3_S29_F3327',\n  'L3_S29_F3398',\n  'L3_S29_F3382',\n  'L3_S36_F3924']}</pre></div>"
                },
                "dataresult": {
                    "0": [
                        "L3_S33_F3857",
                        "L3_S29_F3348",
                        "L3_S29_F3327",
                        "L3_S33_F3859",
                        "L3_S29_F3479",
                        "L3_S29_F3373",
                        "L3_S29_F3324",
                        "L3_S29_F3382",
                        "L3_S29_F3336",
                        "L3_S29_F3330",
                        "L2_S26_F3069",
                        "L0_S0_F20",
                        "L3_S33_F3865",
                        "L3_S29_F3345",
                        "L3_S29_F3379",
                        "L3_S29_F3333",
                        "L3_S29_F3430",
                        "L2_S26_F3062",
                        "L3_S29_F3370",
                        "L3_S29_F3339",
                        "L3_S29_F3395",
                        "L3_S36_F3920",
                        "L3_S29_F3318",
                        "L3_S29_F3351",
                        "L3_S29_F3376",
                        "L3_S29_F3354",
                        "L1_S24_F1565",
                        "L0_S0_F16",
                        "L0_S0_F18",
                        "L2_S26_F3073",
                        "L3_S29_F3321",
                        "L3_S29_F3388",
                        "L3_S29_F3455",
                        "L3_S29_F3315",
                        "L3_S29_F3342",
                        "L3_S29_F3473",
                        "L0_S0_F4",
                        "L0_S0_F10",
                        "L3_S29_F3458",
                        "L3_S29_F3439",
                        "L3_S29_F3424",
                        "L3_S29_F3421",
                        "L3_S29_F3427",
                        "L3_S29_F3452",
                        "L2_S26_F3113",
                        "L3_S36_F3924",
                        "L3_S29_F3449",
                        "L3_S32_F3850",
                        "L2_S26_F3036",
                        "L2_S27_F3129",
                        "L0_S0_F12",
                        "L0_S0_F22",
                        "L0_S0_F6",
                        "L0_S7_F138",
                        "L1_S24_F1838",
                        "L2_S26_F3047",
                        "L0_S0_F8",
                        "L0_S0_F2",
                        "L2_S26_F3051",
                        "L3_S35_F3896",
                        "L3_S29_F3442",
                        "L3_S29_F3360",
                        "L0_S17_F431",
                        "L1_S24_F1846",
                        "L0_S12_F336",
                        "L2_S26_F3121",
                        "L3_S29_F3433",
                        "L1_S24_F1571",
                        "L3_S29_F3476",
                        "L3_S29_F3385",
                        "L3_S33_F3861",
                        "L3_S29_F3357",
                        "L3_S33_F3855",
                        "L3_S35_F3894",
                        "L3_S29_F3367",
                        "L1_S24_F1844",
                        "L0_S7_F142",
                        "L3_S29_F3482",
                        "L3_S29_F3404",
                        "L3_S29_F3436",
                        "L3_S29_F3401"
                    ],
                    "1": [],
                    "2": [
                        "L3_S29_F3351",
                        "L3_S33_F3865",
                        "L3_S29_F3479",
                        "L0_S0_F16",
                        "L3_S29_F3458",
                        "L3_S33_F3859",
                        "L3_S33_F3857",
                        "L3_S29_F3379",
                        "L2_S26_F3040",
                        "L3_S29_F3333",
                        "L3_S29_F3360",
                        "L2_S26_F3073",
                        "L3_S29_F3339",
                        "L3_S29_F3433",
                        "L3_S29_F3407",
                        "L0_S5_F114",
                        "L3_S29_F3348",
                        "L3_S29_F3318",
                        "L3_S29_F3336",
                        "L3_S29_F3395",
                        "L3_S29_F3330",
                        "L1_S24_F1565",
                        "L3_S29_F3427",
                        "L2_S26_F3036",
                        "L3_S29_F3424",
                        "L3_S29_F3327",
                        "L3_S29_F3342",
                        "L3_S35_F3896",
                        "L3_S29_F3442",
                        "L3_S29_F3412",
                        "L3_S33_F3855",
                        "L3_S29_F3401",
                        "L3_S29_F3455",
                        "L1_S24_F1838",
                        "L3_S29_F3476",
                        "L3_S29_F3449",
                        "L0_S0_F20",
                        "L0_S0_F2",
                        "L3_S29_F3452",
                        "L1_S24_F1567",
                        "L1_S24_F1834",
                        "L1_S24_F1850",
                        "L3_S29_F3388",
                        "L3_S29_F3370",
                        "L3_S29_F3385",
                        "L3_S33_F3863",
                        "L3_S29_F3354",
                        "L2_S26_F3062",
                        "L1_S24_F1844",
                        "L0_S0_F10",
                        "L3_S29_F3436",
                        "L3_S36_F3924",
                        "L3_S35_F3894",
                        "L3_S29_F3430",
                        "L3_S29_F3345",
                        "L3_S29_F3373",
                        "L3_S29_F3376",
                        "L0_S0_F18",
                        "L1_S24_F1512",
                        "L3_S29_F3467",
                        "L1_S24_F1575",
                        "L3_S33_F3861",
                        "L0_S0_F22",
                        "L3_S29_F3382",
                        "L1_S24_F1571",
                        "L3_S29_F3398",
                        "L3_S29_F3357"
                    ],
                    "all_top_features": [
                        "L0_S0_F20",
                        "L0_S12_F336",
                        "L2_S26_F3069",
                        "L3_S29_F3324",
                        "L3_S29_F3467",
                        "L3_S33_F3857",
                        "L3_S29_F3479",
                        "L3_S33_F3861",
                        "L3_S29_F3473",
                        "L3_S29_F3321",
                        "L3_S32_F3850",
                        "L2_S26_F3073",
                        "L3_S29_F3351",
                        "L1_S24_F1565",
                        "L3_S29_F3388",
                        "L3_S29_F3357",
                        "L0_S0_F2",
                        "L0_S0_F10",
                        "L3_S29_F3345",
                        "L3_S29_F3330",
                        "L3_S29_F3376",
                        "L2_S26_F3062",
                        "L3_S29_F3442",
                        "L3_S29_F3449",
                        "L1_S24_F1567",
                        "L3_S29_F3373",
                        "L0_S7_F138",
                        "L3_S29_F3430",
                        "L1_S24_F1834",
                        "L0_S0_F22",
                        "L2_S26_F3040",
                        "L3_S33_F3863",
                        "L2_S26_F3036",
                        "L3_S29_F3412",
                        "L0_S17_F431",
                        "L1_S24_F1838",
                        "L3_S29_F3360",
                        "L0_S0_F6",
                        "L3_S29_F3455",
                        "L3_S35_F3894",
                        "L3_S29_F3433",
                        "L3_S33_F3859",
                        "L3_S29_F3482",
                        "L3_S29_F3354",
                        "L3_S29_F3436",
                        "L2_S26_F3051",
                        "L3_S33_F3855",
                        "L1_S24_F1571",
                        "L0_S0_F4",
                        "L1_S24_F1846",
                        "L3_S29_F3404",
                        "L3_S29_F3342",
                        "L3_S29_F3367",
                        "L3_S29_F3439",
                        "L3_S29_F3476",
                        "L3_S29_F3401",
                        "L0_S0_F16",
                        "L3_S29_F3333",
                        "L0_S0_F12",
                        "L3_S29_F3385",
                        "L3_S29_F3318",
                        "L3_S29_F3395",
                        "L3_S29_F3424",
                        "L0_S0_F18",
                        "L3_S29_F3379",
                        "L2_S26_F3113",
                        "L0_S0_F8",
                        "L0_S7_F142",
                        "L1_S24_F1850",
                        "L3_S29_F3407",
                        "L3_S35_F3896",
                        "L3_S29_F3348",
                        "L3_S29_F3370",
                        "L3_S36_F3920",
                        "L1_S24_F1512",
                        "L1_S24_F1844",
                        "L1_S24_F1575",
                        "L3_S29_F3421",
                        "L0_S5_F114",
                        "L2_S26_F3047",
                        "L3_S29_F3339",
                        "L3_S29_F3427",
                        "L2_S26_F3121",
                        "L3_S29_F3315",
                        "L2_S27_F3129",
                        "L3_S29_F3458",
                        "L3_S33_F3865",
                        "L3_S29_F3336",
                        "L3_S29_F3452",
                        "L3_S29_F3327",
                        "L3_S29_F3398",
                        "L3_S29_F3382",
                        "L3_S36_F3924"
                    ]
                },
                "height": 9607
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codeNCQXqw",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "print(new_model.models[\"0\"].best_estimator_.named_steps['clf'].booster().get_fscore())"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "{'f864': 2, 'f280': 6, 'f830': 10, 'f326': 1, 'f866': 6, 'f798': 6, 'f852': 1, 'f822': 2, 'f79': 1, 'f431': 1, 'f816': 6, 'f910': 11, 'f753': 3, 'f828': 3, 'f810': 12, 'f923': 1, 'f911': 15, 'f6': 1, 'f568': 3, 'f802': 4, 'f848': 3, 'f459': 2, 'f476': 2, 'f445': 2, 'f295': 1, 'f844': 13, 'f455': 2, 'f2': 1, 'f328': 2, 'f547': 1, 'f468': 2, 'f808': 5, 'f34': 1, 'f820': 3, 'f882': 2, 'f748': 1, 'f870': 3, 'f840': 5, 'f285': 1, 'f914': 10, 'f794': 3, 'f894': 5, 'f814': 9, 'f834': 5, 'f898': 5, 'f774': 1, 'f281': 1, 'f924': 1, 'f862': 3, 'f884': 1, 'f752': 3, 'f327': 3, 'f926': 1, 'f4': 1, 'f511': 1, 'f324': 3, 'f874': 4, 'f49': 1, 'f469': 2, 'f545': 1, 'f868': 4, 'f792': 5, 'f472': 4, 'f442': 2, 'f913': 1, 'f443': 1, 'f836': 6, 'f460': 1, 'f571': 1, 'f826': 7, 'f427': 2, 'f806': 10, 'f477': 2, 'f300': 1, 'f804': 4, 'f441': 1, 'f471': 2, 'f909': 2, 'f334': 1, 'f860': 5, 'f896': 1, 'f548': 1, 'f3': 2, 'f846': 1, 'f502': 1, 'f426': 2, 'f543': 1, 'f474': 1, 'f456': 6, 'f878': 3, 'f458': 4, 'f928': 2, 'f812': 4, 'f457': 7, 'f76': 1, 'f838': 3, 'f796': 6, 'f35': 2, 'f747': 1, 'f800': 3, 'f872': 4, 'f478': 5, 'f832': 10, 'f0': 1, 'f429': 2, 'f818': 9, 'f279': 5}\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Python3",
                "shellId": "5AC51AF14BBF4F4D8D87634FE5072BC7",
                "elapsedTime": 269,
                "height": 55
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codefMMK3u",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "def get_top_n_features(n):",
                    "    top_n_features = {}",
                    "    for part_type,model in new_model.models.items():",
                    "        scores = model.best_estimator_.named_steps['clf'].booster().get_fscore()",
                    "        sorted_features = sorted(scores.items(), key=lambda x: x[1],reverse=True)",
                    "        top_n_features[part_type] = [feature_tuple[0] for feature_tuple in sorted_features[0:min(n,len(sorted_features)-1)]]",
                    "    top_n_features['all_top_features'] = list(set([feature for part_type in top_n_features.keys() for feature in top_n_features[part_type]]))",
                    "    return top_n_features"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Python3",
                "shellId": "5AC51AF14BBF4F4D8D87634FE5072BC7",
                "elapsedTime": 325,
                "dataresult": [
                    "__class__",
                    "__copy__",
                    "__deepcopy__",
                    "__del__",
                    "__delattr__",
                    "__dict__",
                    "__dir__",
                    "__doc__",
                    "__eq__",
                    "__format__",
                    "__ge__",
                    "__getattribute__",
                    "__getstate__",
                    "__gt__",
                    "__hash__",
                    "__init__",
                    "__le__",
                    "__lt__",
                    "__module__",
                    "__ne__",
                    "__new__",
                    "__reduce__",
                    "__reduce_ex__",
                    "__repr__",
                    "__setattr__",
                    "__setstate__",
                    "__sizeof__",
                    "__str__",
                    "__subclasshook__",
                    "__weakref__",
                    "_validate_features",
                    "best_iteration",
                    "best_ntree_limit",
                    "boost",
                    "copy",
                    "dump_model",
                    "eval",
                    "eval_set",
                    "feature_names",
                    "feature_types",
                    "get_dump",
                    "get_fscore",
                    "handle",
                    "load_model",
                    "predict",
                    "save_model",
                    "save_raw",
                    "set_param",
                    "update"
                ]
            },
            "evaluatorReader": true,
            "lineCount": 8
        },
        {
            "id": "codei59brN",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "get_top_n_features(10)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "[('f560', 7), ('f524', 6), ('f300', 5), ('f568', 4), ('f567', 3), ('f553', 3), ('f301', 3), ('f572', 3), ('f569', 3), ('f545', 2), ('f536', 2), ('f517', 2), ('f546', 2), ('f520', 2), ('f540', 2), ('f558', 2), ('f549', 2), ('f516', 2), ('f552', 1), ('f480', 1), ('f304', 1), ('f224', 1), ('f547', 1), ('f469', 1), ('f474', 1), ('f1', 1), ('f395', 1), ('f526', 1), ('f2', 1), ('f472', 1), ('f530', 1), ('f513', 1), ('f571', 1), ('f534', 1), ('f586', 1), ('f5', 1), ('f531', 1), ('f581', 1), ('f478', 1), ('f284', 1), ('f377', 1), ('f521', 1), ('f48', 1)]\n[('f911', 15), ('f844', 13), ('f810', 12), ('f910', 11), ('f830', 10), ('f914', 10), ('f806', 10), ('f832', 10), ('f814', 9), ('f818', 9), ('f826', 7), ('f457', 7), ('f280', 6), ('f866', 6), ('f798', 6), ('f816', 6), ('f836', 6), ('f456', 6), ('f796', 6), ('f808', 5), ('f840', 5), ('f894', 5), ('f834', 5), ('f898', 5), ('f792', 5), ('f860', 5), ('f478', 5), ('f279', 5), ('f802', 4), ('f874', 4), ('f868', 4), ('f472', 4), ('f804', 4), ('f458', 4), ('f812', 4), ('f872', 4), ('f753', 3), ('f828', 3), ('f568', 3), ('f848', 3), ('f820', 3), ('f870', 3), ('f794', 3), ('f862', 3), ('f752', 3), ('f327', 3), ('f324', 3), ('f878', 3), ('f838', 3), ('f800', 3), ('f864', 2), ('f822', 2), ('f459', 2), ('f476', 2), ('f445', 2), ('f455', 2), ('f328', 2), ('f468', 2), ('f882', 2), ('f469', 2), ('f442', 2), ('f427', 2), ('f477', 2), ('f471', 2), ('f909', 2), ('f3', 2), ('f426', 2), ('f928', 2), ('f35', 2), ('f429', 2), ('f326', 1), ('f852', 1), ('f79', 1), ('f431', 1), ('f923', 1), ('f6', 1), ('f295', 1), ('f2', 1), ('f547', 1), ('f34', 1), ('f748', 1), ('f285', 1), ('f774', 1), ('f281', 1), ('f924', 1), ('f884', 1), ('f926', 1), ('f4', 1), ('f511', 1), ('f49', 1), ('f545', 1), ('f913', 1), ('f443', 1), ('f460', 1), ('f571', 1), ('f300', 1), ('f441', 1), ('f334', 1), ('f896', 1), ('f548', 1), ('f846', 1), ('f502', 1), ('f543', 1), ('f474', 1), ('f76', 1), ('f747', 1), ('f0', 1)]\n[]\n"
                        }
                    ],
                    "payload": "<div class=\"output_subarea output_text\"><pre>{'0': ['f911',\n  'f844',\n  'f810',\n  'f910',\n  'f830',\n  'f914',\n  'f806',\n  'f832',\n  'f814',\n  'f818'],\n '1': [],\n '2': ['f560',\n  'f524',\n  'f300',\n  'f568',\n  'f567',\n  'f553',\n  'f301',\n  'f572',\n  'f569',\n  'f545'],\n 'all_top_features': ['f567',\n  'f810',\n  'f818',\n  'f844',\n  'f830',\n  'f911',\n  'f560',\n  'f914',\n  'f524',\n  'f301',\n  'f806',\n  'f814',\n  'f568',\n  'f553',\n  'f572',\n  'f300',\n  'f569',\n  'f545',\n  'f832',\n  'f910']}</pre></div>"
                },
                "selectedType": "Results",
                "pluginName": "Python3",
                "shellId": "5AC51AF14BBF4F4D8D87634FE5072BC7",
                "elapsedTime": 201,
                "dataresult": {
                    "0": [
                        "f911",
                        "f844",
                        "f810",
                        "f910",
                        "f830",
                        "f914",
                        "f806",
                        "f832",
                        "f814",
                        "f818"
                    ],
                    "1": [],
                    "2": [
                        "f560",
                        "f524",
                        "f300",
                        "f568",
                        "f567",
                        "f553",
                        "f301",
                        "f572",
                        "f569",
                        "f545"
                    ],
                    "all_top_features": [
                        "f567",
                        "f810",
                        "f818",
                        "f844",
                        "f830",
                        "f911",
                        "f560",
                        "f914",
                        "f524",
                        "f301",
                        "f806",
                        "f814",
                        "f568",
                        "f553",
                        "f572",
                        "f300",
                        "f569",
                        "f545",
                        "f832",
                        "f910"
                    ]
                },
                "height": 743
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeVWct2h",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "with open('path_data.json', 'r') as infile:",
                    "    path_data = json.load(infile)",
                    "with open('feature_data.json', 'r') as infile:",
                    "    feature_data = json.load(infile)",
                    "with open('data/part_data.json', 'r') as infile:",
                    "    part_data = json.load(infile)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Python3",
                "shellId": "0E0C74155ECF4E86AFC8067089F662C7",
                "elapsedTime": 52466
            },
            "evaluatorReader": true,
            "lineCount": 6
        },
        {
            "id": "code1GeHDL",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "feature_list = [data[\"feature\"] for data in feature_data]",
                    "#only cluster paths ith >1000 parts to reduce noise and one-off outlier pathways",
                    "path_sparse_matrix = [[1 if feature in path[\"path\"] else 0 for feature in feature_list] for path in path_data if path[\"total_count\"] > 1000]",
                    "len(path_sparse_matrix)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "name &apos;feature_data&apos; is not defined",
                        "name &apos;feature_data&apos; is not defined<br><span  class=\"ansired\">---------------------------------------------------------------------------</span><br><span  class=\"ansired\">NameError</span>                                 Traceback (most recent call last)<br><span  class=\"ansigreen\">&lt;ipython-input-1-dbcbc3e0d017&gt;</span> in <span  class=\"ansicyan\">&lt;module&gt;<span  class=\"ansiblue\">()</span>\n<span  class=\"ansigreen\">----&gt; 1<span  class=\"ansiyellow\"> </span>feature_list <span  class=\"ansiyellow\">=</span> <span  class=\"ansiyellow\">[</span>data<span  class=\"ansiyellow\">[</span><span  class=\"ansiblue\">&quot;feature&quot;</span><span  class=\"ansiyellow\">]</span> <span  class=\"ansigreen\">for</span> data <span  class=\"ansigreen\">in</span> feature_data<span  class=\"ansiyellow\">]</span><span  class=\"ansiyellow\"></span>\n<span  class=\"ansigreen\">      2</span> <span  class=\"ansired\">#only cluster paths ith &gt;1000 parts to reduce noise and one-off outlier pathways</span><span  class=\"ansiyellow\"></span><span  class=\"ansiyellow\"></span>\n<span  class=\"ansigreen\">      3</span> path_sparse_matrix <span  class=\"ansiyellow\">=</span> <span  class=\"ansiyellow\">[</span><span  class=\"ansiyellow\">[</span><span  class=\"ansicyan\">1</span> <span  class=\"ansigreen\">if</span> feature <span  class=\"ansigreen\">in</span> path<span  class=\"ansiyellow\">[</span><span  class=\"ansiblue\">&quot;path&quot;</span><span  class=\"ansiyellow\">]</span> <span  class=\"ansigreen\">else</span> <span  class=\"ansicyan\">0</span> <span  class=\"ansigreen\">for</span> feature <span  class=\"ansigreen\">in</span> feature_list<span  class=\"ansiyellow\">]</span> <span  class=\"ansigreen\">for</span> path <span  class=\"ansigreen\">in</span> path_data <span  class=\"ansigreen\">if</span> path<span  class=\"ansiyellow\">[</span><span  class=\"ansiblue\">&quot;total_count&quot;</span><span  class=\"ansiyellow\">]</span> <span  class=\"ansiyellow\">&gt;</span> <span  class=\"ansicyan\">1000</span><span  class=\"ansiyellow\">]</span><span  class=\"ansiyellow\"></span>\n<span  class=\"ansigreen\">      4</span> len<span  class=\"ansiyellow\">(</span>path_sparse_matrix<span  class=\"ansiyellow\">)</span><span  class=\"ansiyellow\"></span>\n<br><span  class=\"ansired\">NameError</span>: name &apos;feature_data&apos; is not defined"
                    ]
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Python3",
                "shellId": "2627505FE80B4BC98453588427AF2614",
                "elapsedTime": 220,
                "dataresult": 167,
                "height": 81
            },
            "evaluatorReader": true,
            "lineCount": 4
        },
        {
            "id": "code1ihj5s",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "#code adapted from: http://brandonrose.org/clustering",
                    "def plot_clusters(data,dist_measure,n_clusters,algorithm,cluster_colors = ([\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",",
                    "                                                           \"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",",
                    "                                                           \"#cab2d6\",\"#6a3d9a\",\"#ffff99\",\"#b15928\",\"#8dd3c7\",\"#ffffb3\",",
                    "                                                           \"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",",
                    "                                                           \"#d9d9d9\",\"#bc80bd\",\"#ccebc5\",\"#ffed6f\"])):",
                    "",
                    "    dist = DistanceMetric.get_metric(dist_measure)",
                    "    distances = dist.pairwise(data)",
                    "",
                    "    if algorithm == \"km\":",
                    "        model = KMeans(n_clusters=n_clusters)",
                    "        model.fit(data)",
                    "        clusters = model.labels_.tolist()",
                    "    else:",
                    "        model = AgglomerativeClustering(n_clusters=n_clusters,affinity=\"precomputed\",linkage=\"average\")",
                    "        model.fit(distances)",
                    "        clusters = model.labels_.tolist()",
                    "",
                    "    mds = MDS(n_components=2, dissimilarity=\"precomputed\", random_state=1)",
                    "    pos = mds.fit_transform(distances)  # shape (n_components, n_samples)",
                    "",
                    "    xs, ys = pos[:, 0], pos[:, 1]",
                    "    #create data frame that has the result of the MDS plus the cluster numbers and titles",
                    "    df = pd.DataFrame(dict(x=xs, y=ys, label=clusters)) ",
                    "",
                    "    #group by cluster",
                    "    groups = df.groupby('label')",
                    "",
                    "    # set up plot",
                    "    fig, ax = plt.subplots(figsize=(20, 9)) # set size",
                    "    ax.margins(0.05) # Optional, just adds 5% padding to the autoscaling",
                    "",
                    "    #iterate through groups to layer the plot",
                    "    #note that I use the cluster_name and cluster_color dicts with the 'name' lookup to return the appropriate color/label",
                    "    for name, group in groups:",
                    "        ax.plot(group.x, group.y, marker='o', linestyle='', ms=12, ",
                    "                label=\"Part Type \" + str(name+1), color=cluster_colors[name], ",
                    "                mec='none')",
                    "        ax.set_aspect('auto')",
                    "        ax.tick_params(\\",
                    "            axis= 'x',          # changes apply to the x-axis",
                    "            which='both',      # both major and minor ticks are affected",
                    "            bottom='off',      # ticks along the bottom edge are off",
                    "            top='off',         # ticks along the top edge are off",
                    "            labelbottom='off')",
                    "        ax.tick_params(\\",
                    "            axis= 'y',         # changes apply to the y-axis",
                    "            which='both',      # both major and minor ticks are affected",
                    "            left='off',      # ticks along the bottom edge are off",
                    "            top='off',         # ticks along the top edge are off",
                    "            labelleft='off')",
                    "",
                    "    ax.legend(numpoints=1)  #show legend with only 1 point",
                    "",
                    "    for i in range(len(df)):",
                    "        ax.text(df.ix[i]['x'], df.ix[i]['y'], str(i), size=8)",
                    "      ",
                    "    plt.show() #show the plot",
                    "    return model",
                    "    #uncomment the below to save the plot if need be",
                    "    #plt.savefig('clusters_small_noaxes.png', dpi=200)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Python3",
                "shellId": "2627505FE80B4BC98453588427AF2614",
                "elapsedTime": 333
            },
            "evaluatorReader": true,
            "lineCount": 62
        },
        {
            "id": "codevQZx0E",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "n_clusters = 3",
                    "part_type_model = plot_clusters(path_sparse_matrix,\"matching\",n_clusters,\"km\")"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "name &apos;path_sparse_matrix&apos; is not defined",
                        "name &apos;path_sparse_matrix&apos; is not defined<br><span  class=\"ansired\">---------------------------------------------------------------------------</span><br><span  class=\"ansired\">NameError</span>                                 Traceback (most recent call last)<br><span  class=\"ansigreen\">&lt;ipython-input-1-85a24656a812&gt;</span> in <span  class=\"ansicyan\">&lt;module&gt;<span  class=\"ansiblue\">()</span>\n<span  class=\"ansigreen\">      1</span> n_clusters <span  class=\"ansiyellow\">=</span> <span  class=\"ansicyan\">3</span><span  class=\"ansiyellow\"></span>\n<span  class=\"ansigreen\">----&gt; 2<span  class=\"ansiyellow\"> </span>part_type_model <span  class=\"ansiyellow\">=</span> plot_clusters<span  class=\"ansiyellow\">(</span>path_sparse_matrix<span  class=\"ansiyellow\">,</span><span  class=\"ansiblue\">&quot;matching&quot;</span><span  class=\"ansiyellow\">,</span>n_clusters<span  class=\"ansiyellow\">,</span><span  class=\"ansiblue\">&quot;km&quot;</span><span  class=\"ansiyellow\">)</span><span  class=\"ansiyellow\"></span>\n<br><span  class=\"ansired\">NameError</span>: name &apos;path_sparse_matrix&apos; is not defined"
                    ]
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Python3",
                "shellId": "2627505FE80B4BC98453588427AF2614",
                "elapsedTime": 204,
                "height": 81
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "codeaGAADz",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "part_type_features = {}",
                    "",
                    "for i,part in enumerate(part_data[0:10000]):",
                    "    if i % 10000 == 0:",
                    "        print (str(round(i/len(part_data)*100,0)) + \"%\")",
                    "    sparse_matrix = np.array([1 if feature in part[\"features\"] else 0 for feature in feature_list])",
                    "    part_type = str(part_type_model.predict(sparse_matrix)[0])",
                    "    if part_type in part_type_features.keys():",
                    "        part_type_features[part_type] = [max(x) for x in zip(part_type_features[part_type], sparse_matrix)] #take max of old feature matrix and new sample(0 or 1) at each feature index to update part-type feature-set",
                    "    else:",
                    "        part_type_features[part_type] = sparse_matrix ",
                    "",
                    "all_part_type_features = {}",
                    "part_type_data = {}",
                    "for part_type in part_type_features.keys():",
                    "    all_part_type_features[part_type] = [feature_list[i] for i,feature_bool in enumerate(part_type_features[part_type]) if feature_bool ==1]",
                    "",
                    "for i,part in enumerate(part_data[0:10000]):",
                    "    if i % 10000 == 0:",
                    "        print (str(round(i/len(part_data)*100,0)) + \"%\")",
                    "    sparse_matrix = np.array([1 if feature in part[\"features\"] else 0 for feature in feature_list])",
                    "    part_type = str(part_type_model.predict(sparse_matrix)[0])",
                    "    part_type_feature_list = all_part_type_features[part_type]",
                    "    sparse_matrix = [1 if feature in part[\"features\"] else 0 for feature in part_type_feature_list]",
                    "    timestamp_matrix =  [part['timestamps'][feature] if feature in part[\"features\"] else None for feature in part_type_feature_list]",
                    "    value_matrix =  [part['values'][feature] if feature in part[\"features\"] else None for feature in part_type_feature_list]",
                    "    defective = [part['defective']]",
                    "    feature_matrix = timestamp_matrix + value_matrix + defective",
                    "    if part_type in part_type_data.keys():",
                    "        part_type_data[part_type].append(feature_matrix)",
                    "    else:",
                    "        part_type_data[part_type] = [feature_matrix]",
                    "",
                    "with open('data/' + str(n_clusters) + '_part_data.json', 'w') as outfile:",
                    "    json.dump(part_type_data,outfile)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "0.0%\n0.0%"
                        },
                        {
                            "type": "out",
                            "value": "\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Python3",
                "shellId": "0E0C74155ECF4E86AFC8067089F662C7",
                "elapsedTime": 223481,
                "height": 87
            },
            "evaluatorReader": true,
            "lineCount": 35
        },
        {
            "id": "code0kSCtk",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "len(all_part_type_features[\"2\"])"
                ]
            },
            "output": {
                "state": {},
                "result": "<div class=\"output_subarea output_text\"><pre>471</pre></div>",
                "selectedType": "Html",
                "pluginName": "Python3",
                "shellId": "0E0C74155ECF4E86AFC8067089F662C7",
                "elapsedTime": 201,
                "dataresult": 471,
                "height": 53
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codem1LAhi",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "n_clusters = 3",
                    "with open('data/' + str(n_clusters) + '_part_data.json', 'r') as infile:",
                    "    model_data = json.load(infile)",
                    "",
                    "type_1_data = np.array(model_data[\"1\"])",
                    "X = type_1_data[:,0:-1]",
                    "y = type_1_data[:,-1]",
                    "build_classifier(X,y)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": "Interrupted, saved while running."
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Python3",
                "shellId": "21EA35D8FB0B43338D6F5CBB2FEFCBBC",
                "elapsedTime": 2363,
                "dataresult": [
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0
                ],
                "height": 77
            },
            "evaluatorReader": true,
            "lineCount": 8
        },
        {
            "id": "codegKJ75X",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "import xgboost as xgb",
                    "import sys",
                    "",
                    "from sklearn.cross_validation import *",
                    "from sklearn.grid_search import GridSearchCV",
                    "from sklearn.metrics import matthews_corrcoef",
                    "",
                    "import math",
                    "",
                    "def mcc(tp, tn, fp, fn):",
                    "    sup = tp * tn - fp * fn",
                    "    inf = (tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)",
                    "    if inf==0:",
                    "        return 0",
                    "    else:",
                    "        return sup / np.sqrt(inf)",
                    "",
                    "def eval_mcc(y_true, y_prob, show=False):",
                    "    idx = np.argsort(y_prob)",
                    "    y_true_sort = y_true[idx]",
                    "    n = y_true.shape[0]",
                    "    nump = 1.0 * np.sum(y_true) # number of positive",
                    "    numn = n - nump # number of negative",
                    "    tp = nump",
                    "    tn = 0.0",
                    "    fp = numn",
                    "    fn = 0.0",
                    "    best_mcc = 0.0",
                    "    best_id = -1",
                    "    mccs = np.zeros(n)",
                    "    for i in range(n):",
                    "        # all items with idx <= i are predicted negative while others are predicted positive",
                    "        if y_true_sort[i] == 1:",
                    "            tp -= 1.0",
                    "            fn += 1.0",
                    "        else:",
                    "            fp -= 1.0",
                    "            tn += 1.0",
                    "        new_mcc = mcc(tp, tn, fp, fn)",
                    "        mccs[i] = new_mcc",
                    "        if new_mcc >= best_mcc:",
                    "            best_mcc = new_mcc",
                    "            best_id = i",
                    "    if show:",
                    "        best_proba = y_prob[idx[best_id]]",
                    "        y_pred = (y_prob > best_proba).astype(int)",
                    "        score = matthews_corrcoef(y_true, y_pred)",
                    "        print(score, best_mcc)",
                    "        plt.plot(mccs)",
                    "        return best_proba, best_mcc, y_pred",
                    "    else:ms",
                    "        print(\"best MCC \" + str(best_MCC))",
                    "        return best_mcc",
                    "",
                    "def mcc_eval(y_prob, dtrain):",
                    "    y_true = dtrain.get_label()",
                    "    best_mcc = eval_mcc(y_true, y_prob)",
                    "    return 'MCC', -best_mcc",
                    "",
                    "def build_classifier(X,y):",
                    "    ",
                    "    pipe = Pipeline([(\"imputer\", Imputer(missing_values=\"NaN\")),",
                    "                     (\"clf\",xgb.XGBClassifier())",
                    "                   ])",
                    "    ",
                    "    #when in doubt, use xgboost",
                    "    ",
                    "    parameters = {'imputer__strategy':(\"mean\",\"median\",\"most_frequent\"),",
                    "                  'clf__objective':['binary:logistic'],",
                    "                  'clf__eval_metric':[mcc_eval],",
                    "                  'clf__learning_rate': [0.15], #so called `eta` value",
                    "                  'clf__max_depth': [8],",
                    "                  'clf__min_child_weight': [3,11],",
                    "                  'clf__silent': [0],",
                    "                  'clf__subsample': [0.9],",
                    "                  'clf__colsample_bytree': [0.5],",
                    "                  'clf__n_estimators': [300], #number of trees",
                    "                  'clf__seed': [1337]}",
                    "",
                    "",
                    "    #should evaluate by train_eval instead of the full dataset",
                    "    clf = GridSearchCV(pipe, parameters, n_jobs=6, ",
                    "                       cv=StratifiedKFold(y, n_folds=5, shuffle=True), ",
                    "                        scoring=\"f1\",",
                    "                       verbose=99, refit=True)",
                    "",
                    "    clf.fit(X, y)",
                    "    return clf"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Python3",
                "shellId": "21EA35D8FB0B43338D6F5CBB2FEFCBBC",
                "elapsedTime": 353,
                "dataresult": [
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    791.22,
                    791.22,
                    791.22,
                    791.22,
                    791.22,
                    791.23,
                    791.24,
                    791.24,
                    791.24,
                    791.24,
                    791.24,
                    791.24,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    791.29,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    802.22,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    804.34,
                    null,
                    null,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.35,
                    804.36,
                    804.36,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    804.36,
                    804.36,
                    804.36,
                    804.36,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    "3",
                    0.065,
                    -0.034,
                    -0.105,
                    -0.001,
                    -0.162,
                    0.156,
                    -0.23399999999999999,
                    -0.218,
                    -0.243,
                    0.183,
                    -0.051,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    -0.371,
                    -0.016,
                    0.14400000000000002,
                    -0.013999999999999999,
                    0.065,
                    -0.154,
                    -0.016,
                    -0.096,
                    0.015,
                    "3",
                    -0.114,
                    0.132,
                    0.156,
                    0.183,
                    -0.162,
                    0,
                    -0.069,
                    -0.12300000000000001,
                    0.111,
                    -0.114,
                    -0.023,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    -0.11699999999999999,
                    0.036000000000000004,
                    -0.016,
                    0.17800000000000002,
                    0.799,
                    0.034,
                    -0.131,
                    0.259,
                    0.899,
                    "145",
                    0.06,
                    -0.064,
                    -0.14,
                    0.039,
                    0.898,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    -0.013999999999999999,
                    "1",
                    -0.19,
                    "1",
                    -0.037000000000000005,
                    "1",
                    0.131,
                    "1",
                    -0.021,
                    "1",
                    -0.012,
                    "1",
                    -0.012,
                    "1",
                    -0.02,
                    "1",
                    0.053,
                    "1",
                    0.033,
                    "1",
                    -0.001,
                    "1",
                    -0.034,
                    "1",
                    -0.179,
                    "1",
                    0.13699999999999998,
                    "1",
                    -0.05,
                    "1",
                    -0.115,
                    "1",
                    "1",
                    "1",
                    0.131,
                    "1",
                    -0.02,
                    "1",
                    0.138,
                    "1",
                    -0.021,
                    "1",
                    -0.062,
                    "1",
                    -0.011000000000000001,
                    "1",
                    -0.037000000000000005,
                    "1",
                    -0.012,
                    "1",
                    "1",
                    "1",
                    -0.034,
                    "1",
                    -0.115,
                    "1",
                    -0.001,
                    "1",
                    -0.05,
                    "1",
                    0.057,
                    "1",
                    "1",
                    0.057,
                    "1",
                    "1",
                    "1",
                    "1",
                    -0.19,
                    "1",
                    -0.012,
                    "1",
                    0.053,
                    "1",
                    -0.022000000000000002,
                    "1",
                    -0.076,
                    "1",
                    -0.012,
                    "1",
                    -0.013999999999999999,
                    "1",
                    -0.021,
                    "1",
                    "1",
                    "1",
                    0.033,
                    "1",
                    0.13699999999999998,
                    "1",
                    0.053,
                    "1",
                    -0.179,
                    "1",
                    -0.04,
                    "1",
                    0.52,
                    "1",
                    -0.04,
                    "1",
                    0.52,
                    "1",
                    -0.004,
                    "1",
                    -0.005,
                    "1",
                    -0.004,
                    "1",
                    0,
                    "1",
                    0,
                    "1",
                    0,
                    "1",
                    0,
                    null,
                    null,
                    -0.21,
                    -0.193,
                    0.004,
                    -0.21,
                    -0.21,
                    -0.006,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -0.08199999999999999,
                    -0.002,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    0,
                    0,
                    0,
                    0,
                    null,
                    null,
                    null,
                    0
                ],
                "height": 88
            },
            "evaluatorReader": true,
            "lineCount": 88
        }
    ],
    "namespace": {}
}
